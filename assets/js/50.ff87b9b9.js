(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{224:function(e,a,n){"use strict";n.r(a);var t=n(0),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[e._v("#")]),e._v(" 题目")]),e._v(" "),n("h2",{attrs:{id:"文件主要目录及文件作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文件主要目录及文件作用"}},[e._v("#")]),e._v(" 文件主要目录及文件作用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("- component —————————————————— 组件文件夹\n  - navBar                  —— 底部组件\n    - navBar.js             —— 底部组件的 JS 代码\n    - navBar.json           —— 底部组件的配置文件\n    - navBar.wxml           —— 底部组件的 HTML 代码\n    - navBar.wxss           —— 底部组件的 CSS 代码\n- pages  ————————————————————— 页面文件夹\n  - index                   —— 首页\n    - index.js              —— 首页的 JS 代码\n    - index.json            —— 首页的配置文件\n    - index.wxml            —— 首页的 HTML 代码\n    - index.wxss            —— 首页的 CSS 代码\n- public ————————————————————— 图片文件夹\n- utils —————————————————————— 工具文件夹\n  - api.js                  —— 控制 API 的文件\n  - md5.js                  —— 工具 - MD5 加密文件\n  - timestamp.js            —— 工具 - 时间戳文件\n- app.json ——————————————————— 设置全局的基础数据等\n- app.wxss ——————————————————— 公共样式，可通过 import 导入更多\n- project.config.json ———————— 项目配置文件\n")])])]),n("h2",{attrs:{id:"微信小程序生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序生命周期"}},[e._v("#")]),e._v(" 微信小程序生命周期")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("onLoad()：页面加载时触发。\nonShow()：页面显示/切入前台时触发。\nonReady()：页面初次渲染完成时触发。\nonHide()：页面隐藏/切入后台时触发。\nonUnload()：页面卸载时触发。\n")])])]),n("h2",{attrs:{id:"如何封装数据请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何封装数据请求"}},[e._v("#")]),e._v(" 如何封装数据请求")]),e._v(" "),n("p",[e._v("1，封装接口")]),e._v(" "),n("blockquote",[n("p",[e._v("项目/utils/api.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 将请求进行 Promise 封装\nconst fetch = ({url, data}) => {\n\n  // 打印接口请求的信息\n  console.log(`【step 1】API 接口：${url}`);\n  console.log("【step 2】data 传参：");\n  console.log(data);\n\n  // 返回 Promise\n  return new Promise((resolve, reject) => {\n    wx.request({\n      url: getApp().globalData.api + url,\n      data: data,\n      success: res => {\n        \n        // 成功时的处理 \n        if (res.data.code == 0) {\n          console.log("【step 3】请求成功：");\n          console.log(res.data);\n          return resolve(res.data);\n        } else {\n          wx.showModal({\n            title: \'请求失败\',\n            content: res.data.message,\n            showCancel: false\n          });\n        }\n\n      },\n      fail: err => {\n        // 失败时的处理\n        console.log(err);\n        return reject(err);\n      }\n    })\n  })\n\n}\n\n/**\n * code 换取 openId\n * @data {\n *   jsCode - wx.login() 返回的 code\n * }\n */\nexport const wxLogin = data => {\n  return fetch({\n    url: "tbcUser/getWechatOpenId",\n    data: data\n  })\n}\n')])])]),n("p",[e._v("2，调用接口")]),e._v(" "),n("blockquote",[n("p",[e._v("项目/pages/login/login.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import {\n  wxLogin,\n} from '../../utils/api.js'\n")])])]),n("p",[e._v("3，使用接口")]),e._v(" "),n("blockquote",[n("p",[e._v("项目/pages/login/login.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('wxLogin({\n  jsCode: this.data.code\n}).then(\n  res => {\n    console.log("【step 4】返回成功处理：");\n    console.log(res.data);\n  },\n  err => {\n    console.log("【step 4】返回失败处理：");\n    console.log(err);\n  }\n)\n')])])]),n("h2",{attrs:{id:"页面数据传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#页面数据传递"}},[e._v("#")]),e._v(" 页面数据传递")]),e._v(" "),n("p",[e._v("通过 url 携带参数，在 onLoad() 中通过 options 获取 url 上的参数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<navigator url="../index/index?userId={{userId}}"></navigator>\n\n\x3c!-- 这两段是分别在 HTML 和 JS 中的代码 --\x3e\n\nonLoad: function(options) {\n  console.log(options.userId);\n}\n')])])]),n("p",[e._v("通过 Storage 来传递参数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("wx.setStorageSync('userId', 'jsliang');\nwx.getStorageSync('userId');\n")])])]),n("p",[e._v("WXML传递数据到 JS")]),e._v(" "),n("blockquote",[n("p",[e._v("login.wxml")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<text bindtap="clickText" data-labelId="{{userId}}">点击传递数据到 JS</text>\n')])])]),n("blockquote",[n("p",[e._v("login.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("clickText(e) {\n  console.log(e.currentTarget.labelid)\n}\n")])])]),n("p",[e._v("组件调用传参")]),e._v(" "),n("blockquote",[n("p",[e._v("组件接收数据：component-tag-name")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Component({\n  properties: {\n    // 这里定义了innerText属性，属性值可以在组件使用时指定\n    innerText: {\n      type: String,\n      value: 'default value',\n    }\n  }\n})\n")])])]),n("blockquote",[n("p",[e._v("使用组件的页面定义 json")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "usingComponents": {\n    "component-tag-name": "../component/component"\n  }\n}\n')])])]),n("blockquote",[n("p",[e._v("使用组件的页面 HTML 代码")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<view>\n  \x3c!-- 以下是对一个自定义组件的引用 --\x3e\n  <component-tag-name inner-text="Some text"></component-tag-name>\n</view>\n')])])]),n("p",[e._v("通过接口调用传递参数")]),e._v(" "),n("h2",{attrs:{id:"加载性能优化方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载性能优化方法"}},[e._v("#")]),e._v(" 加载性能优化方法")]),e._v(" "),n("p",[e._v("1、通过 this.$preload() 预加载用户可能点击的第二个页面")]),e._v(" "),n("p",[e._v("2、组件化页面，出现两次以上的部分都进行封装成组件")]),e._v(" "),n("p",[e._v("3、提取共用的 CSS 样式")]),e._v(" "),n("p",[e._v("4、优化图片：TinyPNG")]),e._v(" "),n("h2",{attrs:{id:"微信小程序与原生app、vue、h5差异"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序与原生app、vue、h5差异"}},[e._v("#")]),e._v(" 微信小程序与原生APP、Vue、H5差异")]),e._v(" "),n("p",[e._v("微信小程序优势：")]),e._v(" "),n("p",[e._v("1、无需下载\n2、打开速度较快\n3、开发成本低于原生APP")]),e._v(" "),n("p",[e._v("微信小程序劣势：")]),e._v(" "),n("p",[e._v("1、限制多。页面大小不能超过 1M，不能打开超过 5 个层级的页面\n2、样式单一。小程序内部组件已经成宿，样式不可以修改\n3、推广面窄。跑不出微信，还不能跑入朋友圈")]),e._v(" "),n("p",[n("strong",[e._v("微信小程序 VS 原生APP：")])]),e._v(" "),n("p",[e._v("微信小程序有着低开发成本、低获客成本、无需下载的优势")]),e._v(" "),n("p",[n("strong",[e._v("微信小程序 VS  H5")])]),e._v(" "),n("p",[e._v("1、依赖环境不同。一个能在多种手机浏览器运行。一个只能在微信中的非完整的浏览器\n2、开发成本不同。一个可能在各种浏览器出问题。一个只能在微信中运行")]),e._v(" "),n("p",[n("strong",[e._v("微信小程序 VS  Vue")])]),e._v(" "),n("p",[e._v("微信小程序看似就是阉割版的 Vue")]),e._v(" "),n("h2",{attrs:{id:"微信小程序原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微信小程序原理"}},[e._v("#")]),e._v(" 微信小程序原理")]),e._v(" "),n("p",[e._v("本质上就是一个单页面应用，所有的页面渲染和事件处理，都在一个页面中进行")]),e._v(" "),n("p",[e._v("架构为数据驱动的模式，UI 和数据分离，所有页面的更新，都需要通过对数据的更改来实现")]),e._v(" "),n("p",[e._v("微信小程序分为两个部分：webview 和 appService。其中 webview 主要用来展示 UI，appServer 用来处理业务逻辑、数据及接口调用。它们在两个进程中进行，通过系统层 JSBridge 实现通信，实现 UI 的渲染、事件的处理")]),e._v(" "),n("h2",{attrs:{id:"wxml与标准的html的异同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wxml与标准的html的异同"}},[e._v("#")]),e._v(" wxml与标准的html的异同")]),e._v(" "),n("p",[e._v("wxml基于xml设计，标签只能在微信小程序中使用，不能使用html的标签")])])}),[],!1,null,null,null);a.default=s.exports}}]);