(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{192:function(e,a,n){"use strict";n.r(a);var t=n(0),r=Object(t.a)({},(function(){this._self._c;return this._m(0)}),[function(){var e=this,a=e._self._c;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"重点题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重点题"}},[e._v("#")]),e._v(" 重点题")]),e._v(" "),a("h2",{attrs:{id:"webpack打包原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack打包原理"}},[e._v("#")]),e._v(" webpack打包原理")]),e._v(" "),a("p",[e._v("webpack只是一个打包模块的机制，只是把依赖的模块转化成可以代表这些包的静态文件。webpack就是识别你的 入口文件。识别你的模块依赖，来打包你的代码。至于你的代码使用的是commonjs还是amd或者es6的import。webpack都会对其进行分析。来获取代码的依赖。webpack做的就是分析代码。转换代码，编译代码，输出代码。webpack本身是一个node的模块，所以webpack.config.js是以commonjs形式书写的(node中的模块化是commonjs规范的)")]),e._v(" "),a("h2",{attrs:{id:"模块热更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块热更新"}},[e._v("#")]),e._v(" 模块热更新")]),e._v(" "),a("p",[e._v("模块热更新是webpack的一个功能，他可以使代码修改过后不用刷新就可以更新，是高级版的自动刷新浏览器")]),e._v(" "),a("blockquote",[a("p",[e._v("devServer中通过hot属性可以控制模块的热替换")])]),e._v(" "),a("p",[a("strong",[e._v("通过配置文件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('const webpack = require(\'webpack\');\nconst path = require(\'path\');\nlet env = process.env.NODE_ENV == "development" ? "development" : "production";\nconst config = {\n  mode: env,\n devServer: {\n     hot:true\n }\n}\n  plugins: [\n     new webpack.HotModuleReplacementPlugin(), //热加载插件\n  ],\nmodule.exports = config;\n')])])]),a("p",[a("strong",[e._v("通过命令行")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "start": "NODE_ENV=development  webpack-dev-server --config  webpack.develop.config.js --hot",\n  },\n')])])]),a("h2",{attrs:{id:"如何提高webpack构建速度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何提高webpack构建速度"}},[e._v("#")]),e._v(" 如何提高webpack构建速度")]),e._v(" "),a("p",[e._v("1、通过externals配置来提取常用库")]),e._v(" "),a("p",[e._v("2、利用DllPlugin和DllReferencePlugin预编译资源模块 通过DllPlugin来对那些我们引用但是绝对不会修改的npm包来进行预编译，再通过DllReferencePlugin将预编译的模块加载进来")]),e._v(" "),a("p",[e._v("3、使用Happypack 实现多线程加速编译")]),e._v(" "),a("p",[e._v("要注意的第一点是，它对file-loader和url-loader支持不好，所以这两个loader就不需要换成happypack了，其他loader可以类似地换一下")]),e._v(" "),a("p",[e._v("4、使用Tree-shaking和Scope Hoisting来剔除多余代码\n5、使用fast-sass-loader代替sass-loader\n6、babel-loader开启缓存")]),e._v(" "),a("p",[e._v("babel-loader在执行的时候，可能会产生一些运行期间重复的公共文件，造成代码体积大冗余，同时也会减慢编译效率\n可以加上cacheDirectory参数或使用 transform-runtime 插件试试")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// webpack.config.js\nuse: [{\n    loader: \'babel-loader\',\n    options: {\n        cacheDirectory: true\n}]\n// .bablerc\n{\n    "presets": [\n        "env",\n        "react"\n    ],\n    "plugins": ["transform-runtime"]\n}\n')])])]),a("p",[e._v('不需要打包编译的插件库换成全局"script"标签引入的方式')]),e._v(" "),a("p",[e._v("比如jQuery插件，react, react-dom等，代码量是很多的，打包起来可能会很耗时\n可以直接用标签引入，然后在webpack配置里使用 expose-loader 或 externals 或 ProvidePlugin 提供给模块内部使用相应的变量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// @1\nuse: [{\n    loader: 'expose-loader',\n    options: '$'\n    }, {\n    loader: 'expose-loader',\n    options: 'jQuery'\n    }]\n// @2\nexternals: {\n        jquery: 'jQuery'\n    },\n// @3\n        new webpack.ProvidePlugin({\n            $: 'jquery',\n            jQuery: 'jquery',\n            'window.jQuery': 'jquery'\n        }),\n")])])]),a("p",[e._v("8、优化构建时的搜索路径")]),e._v(" "),a("p",[e._v("在webpack打包时，会有各种各样的路径要去查询搜索，我们可以加上一些配置，让它搜索地更快\n比如说，方便改成绝对路径的模块路径就改一下，以纯模块名来引入的可以加上一些目录路径\n还可以善于用下resolve alias别名 这个字段来配置\n还有exclude等的配置，避免多余查找的文件，比如使用babel别忘了剔除不需要遍历的")]),e._v(" "),a("h2",{attrs:{id:"webpack的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的优点"}},[e._v("#")]),e._v(" webpack的优点")]),e._v(" "),a("p",[e._v("专注于处理模块化的项目，能做到开箱即用，一步到位")]),e._v(" "),a("p",[e._v("可通过plugin扩展，完整好用又不失灵活")]),e._v(" "),a("p",[e._v("使用场景不局限于web开发")]),e._v(" "),a("p",[e._v("社区庞大活跃，经常引入紧跟时代发展的新特性，能为大多数场景找到已有的开源扩展")]),e._v(" "),a("p",[e._v("良好的开发体验")]),e._v(" "),a("h2",{attrs:{id:"webpack的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的缺点"}},[e._v("#")]),e._v(" webpack的缺点")]),e._v(" "),a("p",[e._v("webpack的缺点是只能用于采用模块化开发的项目")])])}],!1,null,null,null);a.default=r.exports}}]);