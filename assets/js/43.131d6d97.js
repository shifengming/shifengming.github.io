(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{213:function(t,n,e){"use strict";e.r(n);var s=e(0),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"组件之间的通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件之间的通信"}},[t._v("#")]),t._v(" 组件之间的通信")]),t._v(" "),e("h2",{attrs:{id:"组件关系说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件关系说明"}},[t._v("#")]),t._v(" 组件关系说明")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/1/8/16f848eec6bf1920?w=664&h=802&f=jpeg&s=37042",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("由上边的图可以看出以下几个关系：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("A与B是父子关系")])]),t._v(" "),e("li",[e("p",[t._v("A与C是父子关系")])]),t._v(" "),e("li",[e("p",[t._v("B与D是父子关系")])]),t._v(" "),e("li",[e("p",[t._v("B与E是父子关系")])]),t._v(" "),e("li",[e("p",[t._v("B与C是兄弟关系")])]),t._v(" "),e("li",[e("p",[t._v("D与E是堂兄关系")])]),t._v(" "),e("li",[e("p",[t._v("A与D是隔代关系")])]),t._v(" "),e("li",[e("p",[t._v("A与E是隔代关系")])])]),t._v(" "),e("p",[t._v("由上边几个关系对下边场景预览：")]),t._v(" "),e("ul",[e("li",[t._v("父子 组件之间的数据传递")]),t._v(" "),e("li",[t._v("兄弟 组件之间的数据传递")]),t._v(" "),e("li",[t._v("祖先组件 与 子组件 之间的数据传递")])]),t._v(" "),e("p",[t._v("下面来为大家详细讲解实现这些关系的几种通信方式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("props/$emit\n\n$parent / $children与 ref\n\n$emit/$on\n\nvuex\n\n$attrs/$listeners\n\nprovide/inject\n\n")])])]),e("p",[t._v("几种组件通信方法更好地选用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("当我们的项目比较大时，可以选择更好的状态管理解决方案vuex。\n\n节制地使用$parent和$children,它们的主要目的是作为访问组件的应急方法，\n更推荐用props和events实现父子组件通信\n\n如果仅仅是传递数据，就用$attrs/$listeners好点\n如何不仅传递数据，还做中间处理，就用vuex好些\n")])])]),e("h2",{attrs:{id:"方法一：props-emit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一：props-emit"}},[t._v("#")]),t._v(" 方法一：props/$emit")]),t._v(" "),e("ul",[e("li",[t._v("父组件A 向 子组件B 传递数据 通过props的方法")]),t._v(" "),e("li",[t._v("子组件B 向 父组件A 发送数据 通过emit")])]),t._v(" "),e("h3",{attrs:{id:"父组件向子组件传递数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父组件向子组件传递数据"}},[t._v("#")]),t._v(" 父组件向子组件传递数据")]),t._v(" "),e("p",[t._v("下面通过一个例子来看父组件是如何向子组件传递数据的：\n这个例子是子组件son.vue 通过 props 获取 父组件father.vue 中的数据：\nsonList: ['小白', '小红', '小蓝','小绿']")]),t._v(" "),e("ul",[e("li",[t._v("father父组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n  <div class=\"father\">\n    <com-son :sons=\"sonList\"></com-son>\n  </div>\n</template>\n\n<script>\nimport comSon from './son'\nexport default {\n  name: 'HelloWorld',\n  components: { comSon },\n  data() {\n    return {\n      sonList: ['小白', '小红', '小蓝','小绿']\n    }\n  }\n}\n<\/script>\n")])])]),e("ul",[e("li",[t._v("子组件 son.vue")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n  <div>\n    <span v-for="(item, index) in sons" :key="index">{{item}}</span>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\'sons\']\n}\n<\/script>\n')])])]),e("p",[e("strong",[t._v("注意：")])]),t._v(" "),e("p",[t._v("props 只可以从上一级组件传递到下一级组件，也就是父子组件，即这就是单向数据流")]),t._v(" "),e("p",[t._v("props是只读，不可以被修改，所有被修改都会失效和被警告")]),t._v(" "),e("h3",{attrs:{id:"子组件向父组件传递数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子组件向父组件传递数据"}},[t._v("#")]),t._v(" 子组件向父组件传递数据")]),t._v(" "),e("p",[t._v("下面通过一个例子来看子组件是如何向父组件传递值：这个例子是子组件son.vue通过$emit向父组件值的传递")]),t._v(" "),e("ul",[e("li",[t._v("父组件father.vue")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n  <div class=\"father\">\n    <com-son :sons=\"sonList\" @onEmitIndex=\"onEmitIndex\"></com-son>\n    <p>{{currentIndex}}</p>\n  </div>\n</template>\n\n<script>\nimport comSon from './son'\nexport default {\n  name: 'HelloWorld',\n  components: { comSon },\n  data() {\n    return {\n      currentIndex: -1,\n      sonList: ['小白', '小红', '小蓝','小绿']\n    }\n  },\n  methods:{\n    onEmitIndex(idx){\n      this.currentIndex = idx\n    }\n  }\n}\n<\/script>\n")])])]),e("ul",[e("li",[t._v("子组件son.vue")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n  <div>\n    <span v-for="(item, index) in sons" :key="index" @click="emitIndex(index)">{{item}}</span>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\'sons\'],\n  methods: {\n    emitIndex(index){\n      this.$emit(\'onEmitIndex\',index)\n    }\n  }\n}\n<\/script>\n')])])]),e("h2",{attrs:{id:"方法二：-parent-children与ref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法二：-parent-children与ref"}},[t._v("#")]),t._v(" 方法二：$parent/$children与ref")]),t._v(" "),e("ul",[e("li",[t._v("子实例可以用this.$parent访问父实例")]),t._v(" "),e("li",[t._v("子实例被推入父实例的$children")]),t._v(" "),e("li",[t._v("ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例")])]),t._v(" "),e("p",[t._v("在这里我要说一下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("节制地使用$parent和$children,它们的主要目的是作为访问组件的应急方法，\n\n更推荐用props和events实现父子组件通信\n")])])]),e("p",[t._v("下面我们来通过一个实例说明$parent和$children的用法：")]),t._v(" "),e("ul",[e("li",[t._v("父组件father.vue")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n  <div class=\"father\">\n    <com-son></com-son>\n    <button @click=\"name\">点击改变子组件的值</button>\n  </div>\n</template>\n\n<script>\nimport comSon from './son'\nexport default {\n  name: 'HelloWorld',\n  components: { comSon },\n  data() {\n    return {\n      msg: 'hello,早上好！'\n    }\n  },\n  methods:{\n    name(){\n      this.$children[0].message = \"hello\"\n    }\n  }\n}\n<\/script>\n")])])]),e("ul",[e("li",[t._v("子组件son.vue")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n  <div class=\"com_a\">\n    <span>{{message}}</span>\n    <p>获取父组件的值：{{parentVal}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data(){\n    return {\n      message:'Good wether'\n    }\n  },\n  computed:{\n    parentVal(){\n      return this.$parent.msg;\n    }\n  }\n}\n<\/script>\n")])])]),e("p",[t._v("下边再说ref访问组件的例子：")]),t._v(" "),e("ul",[e("li",[t._v("子组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("export default {\n  data () {\n    return {\n      title: 'Vue.js'\n    }\n  },\n  methods: {\n    sayHello () {\n      window.alert('Hello');\n    }\n  }\n}\n")])])]),e("ul",[e("li",[t._v("父组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n  <component-a ref="comA"></component-a>\n</template>\n<script>\n  export default {\n    mounted () {\n      const comA = this.$refs.comA;\n      console.log(comA.title);\n      comA.sayHello();\n    }\n  }\n<\/script>\n')])])]),e("p",[e("strong",[t._v("注意：")])]),t._v(" "),e("p",[t._v("这两种方法的弊端，无法在跨域兄弟间通信")]),t._v(" "),e("h2",{attrs:{id:"emit-on"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#emit-on"}},[t._v("#")]),t._v(" $emit/$on")]),t._v(" "),e("blockquote",[e("p",[t._v("这个方法可用于父子、隔代、兄弟组件通信")])]),t._v(" "),e("p",[t._v("这种方式是通过一个类似App.vue的实例作为一个模块的事件中心，用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件")]),t._v(" "),e("p",[e("strong",[t._v("当项目比较大的时候，可以选择更好的状态管理解决方案vuex")])]),t._v(" "),e("p",[t._v("下边我们来通过一个实例说明emit/on的用法：")]),t._v(" "),e("p",[t._v("在这里先说一下：")]),t._v(" "),e("p",[t._v("有两个组件A、B,在B组件中接收到A组件传过来的数据")]),t._v(" "),e("p",[t._v("首先开辟个新的Vue根实例")]),t._v(" "),e("p",[t._v("然后我们在A组件中通过$emit方式去定义一个自定义事件方法")]),t._v(" "),e("p",[t._v("然后通过$on去接收A组件自定义的事件传过来的值")]),t._v(" "),e("ul",[e("li",[t._v("首先创建一个vue的空白实例")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import Vue from 'vue'\nexport default new Vue()\n")])])]),e("ul",[e("li",[t._v("子组件A")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("把组件A通过$emit传到那个Vue空白实例里面\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n    <div>\n        <span>A组件->{{msg}}</span>\n        <input type="button" value="把a组件数据传给b" @click ="send">\n    </div>\n</template>\n<script>\nimport vmson from "util/emptyVue"\nexport default {\n    data(){\n        return {\n            msg:{\n                a:\'666\',\n                b:\'999\'\n            }\n        }\n    },\n    methods:{\n        send:function(){\n            vmson.$emit("aevent",this.msg)\n        }\n    }\n}\n<\/script>\n')])])]),e("ul",[e("li",[t._v("子组件B")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("组件B通过$on去监听vmson实例中的自定义方法aevent\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n <div>\n    <span>{{msg}}</span>\n </div>\n</template>\n<script>\n      import vmson from "util/emptyVue"\n      export default {\n         data(){\n                return {\n                    msg:""\n                }\n            },\n         mounted(){\n                vmson.$on("aevent",(val)=>{//监听aevent事件\n                    console.log(val);//打印出来结果\n                    this.msg = val;\n                })\n          }\n    }\n<\/script>\n')])])]),e("ul",[e("li",[t._v("父组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("这个父组件就是把A、B两个组件放在父组件中注册渲染\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n     <div>\n      <childa></childa>\n      <childb></childb>    \n     </div>\n</template>\n<script>\n   import childa from './childa.vue';\n   import childb from './childb.vue';\n   export default {\n    components:{\n        childa,\n        childb\n    },\n    data(){\n        return {\n            msg:\"\"\n        }\n    },\n    methods:{\n       \n    }\n   }\n<\/script>\n")])])]),e("h2",{attrs:{id:"vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" Vuex")]),t._v(" "),e("h3",{attrs:{id:"vuex是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex是什么？"}},[t._v("#")]),t._v(" Vuex是什么？")]),t._v(" "),e("p",[t._v("Vuex是一个专为Vue.js应用程序开发的状态管理模式，它解决了组件之间同一状态的共享问题，它采用集中式存储管理应用的所有组件的状态，所以组件就可以和stort通讯了，其实Vuex就是用来管理组件之间通信的一个组件")]),t._v(" "),e("h3",{attrs:{id:"为什么要使用vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用vuex"}},[t._v("#")]),t._v(" 为什么要使用Vuex?")]),t._v(" "),e("p",[e("strong",[t._v("假如不使用vuex")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("父子组件依赖同一个state\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/1/9/16f88da789ee216f?w=1920&h=1080&f=png&s=108372",alt:"cmd-markdown-logo"}})])]),t._v(" "),e("li",[e("p",[t._v("兄弟组件依赖同一个state\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/1/9/16f88db226691d51?w=1920&h=1080&f=png&s=80106",alt:"cmd-markdown-logo"}})])])]),t._v(" "),e("p",[e("strong",[t._v("用了Vuex之后")]),t._v(" "),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/1/9/16f88dbd6d0591e9?w=1920&h=1080&f=png&s=131897",alt:"cmd-markdown-logo"}})]),t._v(" "),e("h3",{attrs:{id:"vuex各个模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex各个模块"}},[t._v("#")]),t._v(" Vuex各个模块")]),t._v(" "),e("p",[e("strong",[t._v("state")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("state中存放页面共享的状态字段\n")])])]),e("p",[e("strong",[t._v("getters")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("相当于当前模块state的计算属性\n")])])]),e("p",[e("strong",[t._v("mutations")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("如果想更新state中的字段，提交mutations中定义的事件的唯一的方式\n(key为事件名，value是一个函数)，但是中国事件函数必须是同步执行的\n")])])]),e("p",[e("strong",[t._v("actions")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("可以定义异步函数，并在回调中提交mutation,就相当于异步更新了state中的字段\n")])])]),e("p",[e("strong",[t._v("modules")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("类似于命名空间，用于项目中将各个模块的状态分开定义和操作，便于维护\n")])])]),e("h3",{attrs:{id:"vuex实例应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex实例应用"}},[t._v("#")]),t._v(" Vuex实例应用")]),t._v(" "),e("ul",[e("li",[t._v("父组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n  <div id=\"app\">\n    <ChildA/>\n    <ChildB/>\n  </div>\n</template>\n\n<script>\n  import ChildA from 'components/ChildA'\n  import ChildB from 'components/ChildB'\n\n  export default {\n    name: 'App',\n    components: {ChildA, ChildB}\n  }\n<\/script>\n")])])]),e("ul",[e("li",[t._v("子组件ChildA")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" <template>\n  <div id=\"childA\">\n    <h1>我是A组件</h1>\n    <button @click=\"transform\">点我让B组件接收到数据</button>\n    <p>{BMessage}}</p>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        AMessage: 'Hello，B组件，我是A组件'\n      }\n    },\n    computed: {\n      BMessage() {\n        return this.$store.state.BMsg\n      }\n    },\n    methods: {\n      transform() {\n        this.$store.commit('receiveAMsg', {\n          AMsg: this.AMessage\n        })\n      }\n    }\n  }\n<\/script>\n")])])]),e("ul",[e("li",[t._v("子组件ChildB")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n  <div id=\"childB\">\n    <h1>我是B组件</h1>\n    <button @click=\"transform\">点我看A组件接收的数据</button>\n    <p>{{AMessage}}</p>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        BMessage: 'Hello，A组件，我是B组件'\n      }\n    },\n    computed: {\n      AMessage() {\n        return this.$store.state.AMsg\n      }\n    },\n    methods: {\n      transform() {\n        this.$store.commit('receiveBMsg', {\n          BMsg: this.BMessage\n        })\n      }\n    }\n  }\n<\/script>\n")])])]),e("ul",[e("li",[t._v("vuex模块store.js")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst state = {\n  // 初始化A和B组件的数据，等待获取\n  AMsg: '',\n  BMsg: ''\n}\n\nconst mutations = {\n  receiveAMsg(state, payload) {\n    state.AMsg = payload.AMsg\n  },\n  receiveBMsg(state, payload) {\n    state.BMsg = payload.BMsg\n  }\n}\n\nexport default new Vuex.Store({\n  state,\n  mutations\n})\n")])])]),e("h2",{attrs:{id:"attrs-listeners"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attrs-listeners"}},[t._v("#")]),t._v(" $attrs/$listeners")]),t._v(" "),e("blockquote",[e("p",[t._v("用在父组件传递数据给子组件或者孙组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("如果仅仅是传递数据，就用$attrs/$listeners好点\n\n如何不仅传递数据，还做中间处理，就用vuex好些\n")])])]),e("p",[e("strong",[t._v("$attrs：")])]),t._v(" "),e("p",[t._v("$attrs继承所有的父组件属性（除了prop传递的属性、class和style）")]),t._v(" "),e("p",[t._v('当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind="$attrs" 传入内部组件。通常配合 inheritAttrs 选项一起使用。')]),t._v(" "),e("p",[e("strong",[t._v("$listeners：")])]),t._v(" "),e("p",[t._v('它是一个对象，包含了父作用域中的v-on事件监听器，可以配合v-on="$listeners"将所有的事件监听器指向这个组件的某个特定的子元素')]),t._v(" "),e("p",[t._v("下面我们来通过一个实例看$attrs/$listeners的用法：")]),t._v(" "),e("p",[t._v("例：假设有三个组件：A组件包含B组件，B组件包含C组件")]),t._v(" "),e("ul",[e("li",[t._v("A组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<template>\n    <div id="app">\n        <child1 :p-child1="child1" :p-child2="child2" v-on:test1="onTest1" \n        v-on:test2="onTest2"\n        //此处监听了两个事件，可以在B组件或者C组件中直接触发\n        >\n        </child1>\n    </div>\n</template>\n<script>\nimport Child1 from \'./Child1.vue\';\nexport default {\n    data() {\n        return {};\n    },\n    components: { Child1 },\n    methods: {\n        onTest1() {\n            console.log(\'test1 running...\');\n        },\n        onTest2() {\n            console.log(\'test2 running\');\n        }\n    }\n};\n<\/script>\n')])])]),e("ul",[e("li",[t._v("B组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n    <div class=\"child-1\">\n        <p>in child1:</p>\n        <p>props: {{pChild1}}</p>\n        <p>$attrs: {{$attrs}}</p>\n        <hr>\n        <child2 v-bind=\"$attrs\" v-on=\"$listeners\"></child2>\n            //v-on绑定了$listeners，所以C组件能直接触发test\n            //v-bind绑定了$attrs，所以C组件可以获取A组件传递下来的props的值\n    </div>\n</template>\n<script>\nimport Child2 from './Child2.vue';\nexport default {\n    props: ['pChild1'],\n    data() {\n        return {};\n    },\n    inheritAttrs: false,\n    components: { Child2 },\n    mounted() {\n        this.$emit('test1');\n    }\n};\n<\/script>\n")])])]),e("ul",[e("li",[t._v("C组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n    <div class=\"child-2\">\n        <p>in child2:</p>\n        <p>props: {{pChild2}}</p>\n        <p>$attrs: {{$attrs}}</p>\n        <hr>\n    </div>\n</template>\n<script>\nexport default {\n    props: ['pChild2'],\n    data() {\n        return {};\n    },\n    inheritAttrs: false,\n    mounted() {\n        this.$emit('test2');\n    }\n};\n<\/script>\n")])])]),e("h2",{attrs:{id:"provide-inject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject"}},[t._v("#")]),t._v(" provide/inject")]),t._v(" "),e("p",[t._v("祖先组件中通过provider来提供变量，然后在孙组件中通过inject来注入变量")]),t._v(" "),e("p",[t._v("procide/inject API主要解决了跨域组件间的通讯问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系")]),t._v(" "),e("p",[t._v("下边通过一个例子来说明provide/inject的用法：")]),t._v(" "),e("ul",[e("li",[t._v("父组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n    <div>\n        <son prop=\"data\"></son>\n    </div>\n</template>\n \n<script>\nexport default {\n    provide: {\n        name: 'Tom'\n    }\n}\n")])])]),e("ul",[e("li",[t._v("孙子组件")])]),t._v(" "),e("blockquote",[e("p",[t._v("这里的孙子组件指的是：父组件、子组件、孙子组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<template>\n    <div>\n        {{name}}\n    </div>\n</template>\n \n<script>\nexport default {\n    name: 'grandson',\n    inject: [name]\n}\n<\/script>\n")])])]),e("p",[t._v("这里可以通过inject直接访问其两个层次以上的数据，")]),t._v(" "),e("p",[t._v("用法与props完全相同")]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[e("strong",[t._v("vue组件间的通讯大致可以分为三类")])]),t._v(" "),e("h3",{attrs:{id:"父子通讯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父子通讯"}},[t._v("#")]),t._v(" 父子通讯")]),t._v(" "),e("p",[e("strong",[t._v("props/emit、parent/children、 attrs/$listeners、provide/inject API、ref")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("父向子传递数据通过props\n\n子向父传递是通过$emit、event\n\n子实例访问父实例通过$parent\n\n父实例访问子实例通过$children\n\n$attrs用父组件传递数据给子组件或孙组件\n(包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外))\n\nlisteners用父组件传递数据给子组件或孙组件\n包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器\n\n祖先组件通过provider提供变量给子孙组件\n\n子孙组件通过inject注入变量给祖先组件\n\nref用来访问组件实例\n")])])]),e("h3",{attrs:{id:"兄弟通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#兄弟通信"}},[t._v("#")]),t._v(" 兄弟通信")]),t._v(" "),e("p",[e("strong",[t._v("Vuex")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vuex用来作为兄弟之间和跨级之间的通信\n")])])]),e("h3",{attrs:{id:"跨级通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨级通信"}},[t._v("#")]),t._v(" 跨级通信")]),t._v(" "),e("p",[e("strong",[t._v("Vuex、attrs/listeners、provide/inject API")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("vuex用来作为兄弟之间和跨级之间的通信\n\n$attrs用父组件传递数据给子组件或孙组件\n(包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外))\n\nlisteners用父组件传递数据给子组件或孙组件\n包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器\n\n祖先组件通过provider提供变量给子孙组件\n\n子孙组件通过inject注入变量给祖先组件\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);