(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{217:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue去哪儿项目总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue去哪儿项目总结"}},[t._v("#")]),t._v(" vue去哪儿项目总结")]),t._v(" "),e("h2",{attrs:{id:"项目地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目地址"}},[t._v("#")]),t._v(" 项目地址")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/shifengming/Tranvel\n")])])]),e("h2",{attrs:{id:"使用的技术栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用的技术栈"}},[t._v("#")]),t._v(" 使用的技术栈")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue：Vue、Vue-router、Vuex、Vue-cli\n\n插件：vue-awesome-swiper、better-scroll、axios\n\nCSS的预处理框架：stylus\n\napi：后台数据接口\n")])])]),e("h2",{attrs:{id:"项目目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目目录"}},[t._v("#")]),t._v(" 项目目录")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("README.md\t\t//项目的说明文件\npackage.json\t\t//第三方依赖包配置\npackage-lock.json\t//帮助我们去确定安装的第三方依赖包的具体的版本，保持团队编程的统一\nLICENSE\t\t//开源协议的说明\nindex.html\t//项目默认的首页\n.postcssrc.js\t//是对postcss的配置项\n.gitgnore\t//不需要上传到git上的文件管理\n.eslintrc.js\t//对代码进行检验，是否标准\n.eslintignore\t//配置不需要eslintrc检测工具检测的文件\n.editorconfig\t//配置编辑器总风格统一的自动化格式的语法\n.babelrc\t//做一些语法的转换，编译成浏览器所能识别的代码\nstatic\t\t//目录下放的是一些静态资源，静态图片，静态数据，和后续模拟json数据\nnode_modules\t//项目中需要用到的第三方node包\nsrc\t\t//放的是项目的源代码\nsrc/main.js \t//整个项目的入口文件\nsrc/app.vue\t//整个项目最原始的根组件\nsrc/router/index.js\t//项目的路由放置位置\nsrc/components\t\t//项目里要用的一些小组件\nsrc/assets\t//项目中需要用到的图片\nconfig\t\t//放置项目配置文件\nconfig/index.js\t\t//放基础配置\nconfig/dev.env.js\t//开发环境配置信息\nconfig/prod.env.js\t//线上环境配置信息\nbuild\t\t//放置项目打包的webpack配置信息，vue-cli会自动构建\nbuild/webpack.base.conf.js\t//基础的webpack配置信息\nbuild/webpack.dev.conf.js\t//开发环境的webpack配置信息\nbuild/webpack.prod.conf.js\t//线上环境的webpack配置项\n")])])]),e("h2",{attrs:{id:"项目相关的npm依赖包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目相关的npm依赖包"}},[t._v("#")]),t._v(" 项目相关的npm依赖包")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fastClick：用来处理移动端click事件300毫秒延迟\n\nStylus: CSS预处理器框架\n\nStylus-loader\n\nVue-awesome-swiper：轮播插件\n\nAxios：实现ajax\n\nBetter-scroll：scroll插件\n")])])]),e("h2",{attrs:{id:"项目环境准备"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目环境准备"}},[t._v("#")]),t._v(" 项目环境准备")]),t._v(" "),e("p",[t._v("下载地址(nodejs.org/en/),然后在安装node的时候npm 也被下载下来了")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/3/16cf6b4d606e9abc?w=1118&h=639&f=png&s=54247",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("查看node是否安装好")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/3/16cf6b7089c06024?w=182&h=94&f=png&s=1912",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("在码云上新建一个项目，用来管理代码")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/3/16cf6b7da493b5ad?w=1055&h=285&f=png&s=26730",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("本地克隆刚才创建的项目")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/3/16cf6b8b78053578?w=584&h=131&f=png&s=7928",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("使用脚手架Vue Cli使用webpack构建项目")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install -g vue-cli\n")])])]),e("p",[t._v("创建项目")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue init webpack Travel\n")])])]),e("p",[t._v("运行项目")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm run dev\n")])])]),e("p",[t._v("提交代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("首先使用git status查看仓库状态\n然后使用git add . 将代码提交到缓存区\ngit commit -am “注释”\ngit push 将代码提交到码云\n")])])]),e("p",[t._v("最后在码云上看一下效果")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/3/16cf6bcd40adbd61?w=1117&h=558&f=png&s=70776",alt:"cmd-markdown-logo"}})]),t._v(" "),e("h2",{attrs:{id:"移动端300ms延迟"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动端300ms延迟"}},[t._v("#")]),t._v(" 移动端300ms延迟")]),t._v(" "),e("p",[t._v("移动端浏览器click事件为什么会有300ms的延迟呢？因为在手机上有个双击方案 —— 在手机上快速点击两下，实现页面放大；再次双击，恢复到原始比例")]),t._v(" "),e("p",[t._v("那它是如何实现的呢？浏览器在捕捉到第一次点击事件后，会等待一段时间，如果在这段时间内，用户没有再次进行点击操作的话，就执行单击事件；如果用户进行了第二次点击操作的话，就会执行双击事件。这段等待的时间大约300ms")]),t._v(" "),e("p",[t._v("如何解决这个延迟呢？有很多方法，这里推荐两种比较简单的方法")]),t._v(" "),e("h3",{attrs:{id:"第一种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一种"}},[t._v("#")]),t._v(" 第一种")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1,minimum-scale=1, user-scalable=no">\n\nwidth=device-width 宽度为设备宽度\ninitial-scale=1 初始比例为1\nmaximum-scale=1 最大比例为1\nminimum-scale=1 最小比例为1\nuser-scalable=no 用户不能进行放大缩小\n')])])]),e("h3",{attrs:{id:"第二种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二种"}},[t._v("#")]),t._v(" 第二种")]),t._v(" "),e("p",[t._v("引入第三方库fastclick")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm install fastclick --save\n")])])]),e("p",[t._v("因为所有页面都要引入，所以在入口处统一引入就可以了")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import FastClick from 'fastclick'\n\nFastClick.attach(document.body)\n")])])]),e("h2",{attrs:{id:"_1px像素问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1px像素问题"}},[t._v("#")]),t._v(" 1px像素问题")]),t._v(" "),e("p",[t._v("红色边框是用border-bottom: 1px solid red;写的，在手机上明显可以看出它不是1px")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/1/16938c149319c1e2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("怎么解决这种问题？")]),t._v(" "),e("p",[t._v("推荐一种：伪类 + transform")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".border1\n  height: .5rem\n  position: relative\n.border1:before\n  position: absolute\n  top:-.5rem\n  left:0\n  content: ''\n  width:100%\n  height:1px\n  border-top:1px solid rgba(0,0,0,.3)\n  transform: scaleY(0.5)\n")])])]),e("p",[t._v("这种方式就是把原先元素的border去掉，然后利用:before或者:after重做border ，并transform的scale缩小一半，原先的元素相对定位，新做的border绝对定位")]),t._v(" "),e("h2",{attrs:{id:"样式重置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#样式重置"}},[t._v("#")]),t._v(" 样式重置")]),t._v(" "),e("p",[t._v("网上有很多reset.css找一份引入到项目中")]),t._v(" "),e("h2",{attrs:{id:"首页轮播占位"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#首页轮播占位"}},[t._v("#")]),t._v(" 首页轮播占位")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/7/16d09e0517bf5c8d?w=1242&h=652&f=jpeg&s=237698",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("图片是可替代资源，在页面显然时，会先将页面中静态的内容渲染上去，等数据返回后，在进行重新渲染，这样页面就会出现抖动，影响用户体验，同时性能也比较低。")]),t._v(" "),e("p",[t._v("可以用下面的css代码对这些可替换资源先进行占位，页面大体框架在第一次渲染后就能呈现给用户，数据获取到后，替换相应的内容就可，就不会出现抖动了")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".icon-img\n  overflow: hidden\n  width: 100%\n  height: 0\n  padding-bottom: 100%\n")])])]),e("h2",{attrs:{id:"样式穿透"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#样式穿透"}},[t._v("#")]),t._v(" 样式穿透")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/7/16d09e0517bf5c8d?w=1242&h=652&f=jpeg&s=237698",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("在子组件中实现在这样的布局，需要用到样式穿透，不然是无法滚动下半部分的")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(".icons >>> .swiper-container\n height: 0\n padding-bottom:50%\n")])])]),e("h2",{attrs:{id:"多页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多页"}},[t._v("#")]),t._v(" 多页")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/7/16d09e0517bf5c8d?w=1242&h=652&f=jpeg&s=237698",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("现在上面的轮播，一页上有8个icon，此时如果需求变成了9个，怎样才能做到在不改动代码的前提下，能实现任意数量的icon")]),t._v(" "),e("p",[t._v("可以用计算属性computed对iconList进行监听：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在Home.vue首先定义了iconList:[]通过属性传递给了Icon.vue组件")])]),t._v(" "),e("li",[e("p",[t._v("在Icons.vue中通过props接收到了iconList数据")])]),t._v(" "),e("li",[e("p",[t._v("使用computed之所以能对iconList监听，是因为刚开始传递过来的iconList是空数组，当获取到数据之后，在传递过来iconList是有值得，iconList一旦发生了变化，computed就能捕捉到")])]),t._v(" "),e("li",[e("p",[t._v("computed中还有一个计算属性showIconList,它的用途是：")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" 1，刚开始渲染的时候，由于iconList是一个空数组，直接将空数组渲染上去了\n 2，当有了数据之后，又会进行第二次渲染，此时就会看到，轮播始终在最后一页\n 3，使用v-if=showIconList是为了不让它在空数组时渲染，而是要等到有数据后在渲染\n 4，所以swiper在初次创建是应该要用完整的数据来创建，而不是要空数据创建\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<swiper :options="swiperOption">\n <swiper-slide v-for="(page,index) of pages" :key="index" v-if="showIconList">\n    <div class="icon" v-for="item of page" :key="item.id">\n      <div class="icon-img">\n        <img class="icon-img-content" :src="item.iconUrl" alt="">\n   </div>\n      <p class="icon-desc">{{item.desc}}</p>\n  </div>\n </swiper-slide>\n</swiper>\ncomputed: {\n  pages () {\n   const pages = []\n   this.iconList.forEach((item, index) => {\n    const page = Math.floor(index / 8)      //每页是 8 个，index / 8 能获取到页数\n     if (!pages[page]) {   //初始化每一项\n      pages[page] = []\n    }\n    pages[page].push(item)  //变成新数组\n   })\n   return pages\n  },\n  showIconList () {\n   return this.iconList.length\n  }\n}\n')])])]),e("h2",{attrs:{id:"城市选择页面节流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#城市选择页面节流"}},[t._v("#")]),t._v(" 城市选择页面节流")]),t._v(" "),e("p",[t._v("手指在城市字母表中滑动时，会触发无数次handleTouchMove这个函数，这就对性能影响很大")]),t._v(" "),e("p",[t._v("函数节流：通过设定一个时间周期，只要在这个周期内函数就不执行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ihandleTouchMove (e) {\n if (this.touchStatus) {\n  if (this.timer) {\n   clearTimeout(this.timer)\n  }\n  this.timer = setTimeout(() => {\n   const touchY = e.touches[0].clientY - 79\n   const index = Math.floor((touchY - this.startY) / 20)\n   if (index >= 0 && index < this.letters.length) {\n    this.$emit('change', this.letters[index])\n   }\n  }, 10)\n }\n}\n")])])]),e("p",[t._v("这里设置的周期是10ms，10ms这个代码只会执行一次，大大优化了性能")]),t._v(" "),e("h2",{attrs:{id:"keep-alive优化请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive优化请求"}},[t._v("#")]),t._v(" keep-alive优化请求")]),t._v(" "),e("p",[t._v("只发送一次请求")]),t._v(" "),e("p",[t._v("每次点击城市或者回到首页时，都会重新发送一个ajax请求，因为当路由切换的时候，这个组件就会被重新渲染，组件一被重新渲染，mounted这个钩子函数就会被执行。这样就会对性能造成比较大的影响")]),t._v(" "),e("p",[t._v("Vue 也考虑到了这一点，为我们提供了一个keep-alive的标签")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<keep-alive>\n   <router-view/>\n</keep-alive>\n")])])]),e("p",[t._v("路由的内容被加载过一次之后，就把路由的内容放到内存之中，下次在进这个路由的时候不需要再重新渲染组件了，只需你从内容里把以前的内容拿出来显示就可以了")]),t._v(" "),e("p",[t._v("城市改变再发送请求")]),t._v(" "),e("p",[t._v("按照上面这样优化，当我改变城市时，它也不会发送请求，因为这一块用的是内存里的数据，那么这个选择曾是功能就变得有名无实，那该怎么改进呢？")]),t._v(" "),e("p",[t._v("当我们使用了keep-alive标签后，会自动执行钩子函数activated，而mounted钩子函数是不会被执行的")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("activated () {\n    if (this.lastCity !== this.city) {\n      this.lastCity = this.city\n      this.getHomeInfo()\n    }\n}\n")])])]),e("h2",{attrs:{id:"详情页全局事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#详情页全局事件"}},[t._v("#")]),t._v(" 详情页全局事件")]),t._v(" "),e("p",[t._v("详情页绑定了一个全局事件，当我在详情页面中滚动，这个样写没有问题，但是当我去到其他页面，在滚动时，你就会发现，刚刚你绑定在详情页中的滚动事件，在这个页面也被执行了，这肯定是有问题的")]),t._v(" "),e("p",[t._v("其实在我们使用了keep-alive标签后，会有两个生命周期函数分别是：activated、deactivated")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("activated：页面展示的时候被执行\n\ndeactivated：页面被隐藏或者页面即将被替换成新的页面时被执行\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("activated () {\n    window.addEventListener('scroll', this.handleScroll)\n},\ndeactivated () {\n    window.removeEventListener('scroll', this.handleScroll)\n}\n")])])]),e("p",[t._v("这段代码是页面被展示的执行scroll，页面被隐藏的时候移除scroll事件")]),t._v(" "),e("h2",{attrs:{id:"递归组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递归组件"}},[t._v("#")]),t._v(" 递归组件")]),t._v(" "),e("p",[t._v("递归组件就是在我组件的自身去调用组件的自身")]),t._v(" "),e("p",[t._v("如何实现 一级标题，二级标题，三级标题？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('data () {\n    return {\n        "categoryList": [{\n            "title": "成人票",\n            "children": [{\n                "title": "成人三馆联票",\n                "children": [{\n                    "title": "成人三馆联票 - 某一销售店"\n                }]\n            }, {\n                "title": "成人五馆联票"\n            }]\n        }, {\n            "title": "儿童票"\n        }, {\n            "title": "学生票"\n        }, {\n            "title": "特惠票"\n        }]\n    }\n}\n')])])]),e("p",[t._v("对一层标题用v-for来进行循环，二、三层标题该怎么显示出来呢？在写组件的时候，都会写一个name的属性，它其中一个用途就是——递归组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<div\n    class="item"\n    v-for="(item, index) of categoryList"\n    :key="index"\n>\n    <div class="item-title">\n      <span class="item-title-icon"></span>\n      {{item.title}}\n    </div>\n    <div class="item-title-children" v-if="item.children">  //判断是否有数据中是否有 children 这个属性，如果有就使用递归组件\n      <detail-list :categoryList="item.children"></detail-list>     //把 children 传给递归组件\n    </div>\n </div>\n')])])]),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/7/16d0a4bd5f3d454f?w=305&h=227&f=png&s=13260",alt:"cmd-markdown-logo"}})]),t._v(" "),e("h2",{attrs:{id:"keep-alive不缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive不缓存"}},[t._v("#")]),t._v(" keep-alive不缓存")]),t._v(" "),e("p",[t._v("在Detail.vue页面中，当我点击了其他景点后，它也是不会发送请求的，那么Detail页面就不会重新渲染了")]),t._v(" "),e("p",[t._v("可以使用keep-alive的exclude属性，给它默认设置为Detail，用途是每次进入Detail页面都会发送请求")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<keep-alive exclude="Detail">   //使用 exclude 属性，可以设置不需要缓存的页面\n   <router-view/>\n</keep-alive>\n')])])]),e("h2",{attrs:{id:"组件中name名字用途"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件中name名字用途"}},[t._v("#")]),t._v(" 组件中name名字用途")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("递归组件可以用到\n当你相对某个页面想取消缓存的时候会用到\n在 Vue 的开发调试工具中会用到\n")])])]),e("h2",{attrs:{id:"webpack使用alias"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack使用alias"}},[t._v("#")]),t._v(" webpack使用alias")]),t._v(" "),e("p",[t._v("项目中有许多地方需要引入一些公用样式，此项目样式是用stylus写了，比如很多地方都需要用到主题色，统一写在一个文件中后期维护很方便。但是引入这个文件很麻烦：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("../../../assets/styles/varible.css\n")])])]),e("p",[t._v("如果每个页面都这样引入文件，一方面写的不优雅，另一方面维护也不方便")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("module.exports = {\n  ...\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n      'styles': resolve('src/assets/styles')\n    }\n  }\n}\n")])])]),e("p",[t._v("在build/webpack.base.config.js文件中找到resolve下alias，它可以对路径进行简化操作，项目中引入这个文件只需要写styles/varible.css即可")]),t._v(" "),e("h2",{attrs:{id:"路径分配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路径分配"}},[t._v("#")]),t._v(" 路径分配")]),t._v(" "),e("p",[t._v("在自己开发中，经常需要自己mock数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("axios.get('/api/detail.json', {\n    params: {\n      id: this.$route.params.id\n    }\n}).then(this.getDetailInfoSucc)\n")])])]),e("p",[t._v("这样写路径是访问不到自己mock的数据的，那应该怎么写呢？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("axios.get('/static/mock/detail.json', {\n    params: {\n      id: this.$route.params.id\n    }\n}).then(this.getDetailInfoSucc)\n")])])]),e("p",[t._v("把/api改成/static/mock/这样访问到我们本地的数据了，但是这样有风险的，上线前你需要改回/api，很容易出错，造成bug")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("module.exports = {\n  dev: {\n    ...\n    proxyTable: {\n      '/api':{\n        target: 'http://localhost:8080',\n        pathRewrite: {\n          '^/api':'/static/mock'\n        }\n      }\n    }\n }\n")])])]),e("p",[t._v("在config/index.js文件中找到dev下的proxyTable，它可以代理路径，我们在项目中写/api，通过proxyTable可以自动找到/static/mock这个目录")]),t._v(" "),e("h2",{attrs:{id:"移动端访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动端访问"}},[t._v("#")]),t._v(" 移动端访问")]),t._v(" "),e("p",[t._v("1、在config文件夹中的index.js中的host选项，将本地localhost改为0.0.0.0")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/8/16d0c80506fe688a?w=717&h=381&f=png&s=56090",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("2、在cmd中输入ipconfig查看本地IP")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/8/16d0c860826f523d?w=653&h=345&f=png&s=16385",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("3、在浏览器中输入IP地址")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/8/16d0c8b84dc8105d?w=498&h=555&f=png&s=89058",alt:"cmd-markdown-logo"}})]),t._v(" "),e("p",[t._v("4、端口号访问(http://172.20.10.4:8080),将这个网址复制到网页版“草料二维码”中，用QQ扫码访问即可")])])}),[],!1,null,null,null);a.default=n.exports}}]);